using System;
using System.Diagnostics;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        int arraySize = 100;
        int[][] arrays = new int[100][];
        Random rand = new Random();

        // Generate 100 random arrays
        for (int i = 0; i < 100; i++)
        {
            arrays[i] = new int[arraySize];
            for (int j = 0; j < arraySize; j++)
            {
                arrays[i][j] = rand.Next(1000); // Random numbers between 0 and 999
            }
        }

        // Apply all quicksort techniques to each array and measure execution time
        Stopwatch stopwatch = new Stopwatch();
        double[,] executionTimes = new double[100, 7];
        double[] totalExecutionTimePerTechnique = new double[7];

        using (StreamWriter writer = new StreamWriter("output.txt"))
        {
            for (int i = 0; i < 100; i++)
            {
                writer.WriteLine($"Array {i + 1}:");
                writer.WriteLine("Generated Array:");
                PrintArray(arrays[i], writer);
                writer.WriteLine();

                for (int j = 0; j < 7; j++)
                {
                    int[] arr = (int[])arrays[i].Clone(); // Clone the array to keep the original intact

                    stopwatch.Reset();
                    stopwatch.Start();
                    switch (j)
                    {
                        case 0:
                            QuickSortMedianOfThree(arr, 0, arr.Length - 1);
                            break;
                        case 1:
                            QuickSortMedianOfFiveRandom(arr, 0, arr.Length - 1);
                            break;
                        case 2:
                            QuickSortMedianOfFive(arr, 0, arr.Length - 1);
                            break;
                        case 3:
                            QuickSortMedianOfSevenRandom(arr, 0, arr.Length - 1);
                            break;
                        case 4:
                            QuickSortMedianOfSeven(arr, 0, arr.Length - 1);
                            break;
                        case 5:
                            QuickSortMedianOfNineRandom(arr, 0, arr.Length - 1);
                            break;
                        case 6:
                            QuickSortMedianOfNine(arr, 0, arr.Length - 1);
                            break;
                    }
                    stopwatch.Stop();
                    executionTimes[i, j] = stopwatch.Elapsed.TotalSeconds;
                    totalExecutionTimePerTechnique[j] += executionTimes[i, j];

                    PrintTechniqueName(j, writer);
                    writer.WriteLine($" execution time: {executionTimes[i, j]} seconds");
                }
                writer.WriteLine();
            }

            // Calculate average execution time for all arrays and all techniques
            double totalExecutionTimeAllArrays = 0;
            for (int i = 0; i < 100; i++)
            {
                for (int j = 0; j < 7; j++)
                {
                    totalExecutionTimeAllArrays += executionTimes[i, j];
                }
            }
            double averageExecutionTimeAllArrays = totalExecutionTimeAllArrays / (100 * 7);

            writer.WriteLine($"Average execution time for all arrays: {averageExecutionTimeAllArrays} seconds");

            writer.WriteLine("Average execution time for each technique:");
            for (int j = 0; j < 7; j++)
            {
                PrintTechniqueName(j, writer);
                writer.WriteLine($" average execution time: {totalExecutionTimePerTechnique[j] / 100} seconds");
            }
        }
    }

    // QuickSort using Median of Three
    static void QuickSortMedianOfThree(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfThree(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfThree(arr, low, partitionIndex - 1);
            QuickSortMedianOfThree(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfThree(int[] arr, int low, int high)
    {
        int mid = low + (high - low) / 2;
        if (arr[low] > arr[mid])
        {
            Swap(ref arr[low], ref arr[mid]);
        }
        if (arr[low] > arr[high])
        {
            Swap(ref arr[low], ref arr[high]);
        }
        if (arr[mid] > arr[high])
        {
            Swap(ref arr[mid], ref arr[high]);
        }
        return arr[mid];
    }

    static int Partition(int[] arr, int low, int high, int pivot)
    {
        int i = low - 1;
        for (int j = low; j < high; j++)
        {
            if (arr[j] < pivot)
            {
                i++;
                Swap(ref arr[i], ref arr[j]);
            }
        }
        Swap(ref arr[i + 1], ref arr[high]);
        return i + 1;
    }

    // Median of Five with random selection
    static void QuickSortMedianOfFiveRandom(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfFiveRandom(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfFiveRandom(arr, low, partitionIndex - 1);
            QuickSortMedianOfFiveRandom(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfFiveRandom(int[] arr, int low, int high)
    {
        int[] indices = new int[5];
        Random rand = new Random();

        for (int i = 0; i < 5; i++)
        {
            indices[i] = rand.Next(low, high + 1);
        }
        Array.Sort(indices);

        return arr[indices[2]]; // Middle element of the sorted indices
    }

    // Median of Five without random selection
    static void QuickSortMedianOfFive(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfFive(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfFive(arr, low, partitionIndex - 1);
            QuickSortMedianOfFive(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfFive(int[] arr, int low, int high)
    {
        int mid = low + (high - low) / 2;
        int quart1 = low + (mid - low) / 2;
        int quart3 = mid + (high - mid) / 2;
        return MedianOfThree(arr, quart1, quart3);
    }

    // Median of Seven with random selection
    static void QuickSortMedianOfSevenRandom(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfSevenRandom(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfSevenRandom(arr, low, partitionIndex - 1);
            QuickSortMedianOfSevenRandom(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfSevenRandom(int[] arr, int low, int high)
    {
        int[] indices = new int[7];
        Random rand = new Random();

        for (int i = 0; i < 7; i++)
        {
            indices[i] = rand.Next(low, high + 1);
        }
        Array.Sort(indices);

        return arr[indices[3]]; // Middle element of the sorted indices
    }

    // Median of Seven without random selection
    static void QuickSortMedianOfSeven(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfSeven(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfSeven(arr, low, partitionIndex - 1);
            QuickSortMedianOfSeven(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfSeven(int[] arr, int low, int high)
    {
        int mid = low + (high - low) / 2;
        int quart1 = low + (mid - low) / 2;
        int quart3 = mid + (high - mid) / 2;
        return MedianOfThree(arr, quart1, quart3);
    }

    // Median of Nine with random selection
    static void QuickSortMedianOfNineRandom(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfNineRandom(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfNineRandom(arr, low, partitionIndex - 1);
            QuickSortMedianOfNineRandom(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfNineRandom(int[] arr, int low, int high)
    {
        int[] indices = new int[9];
        Random rand = new Random();

        for (int i = 0; i < 9; i++)
        {
            indices[i] = rand.Next(low, high + 1);
        }
        Array.Sort(indices);

        return arr[indices[4]]; // Middle element of the sorted indices
    }

    // Median of Nine without random selection
    static void QuickSortMedianOfNine(int[] arr, int low, int high)
    {
        if (low < high)
        {
            int pivot = MedianOfNine(arr, low, high);
            int partitionIndex = Partition(arr, low, high, pivot);

            QuickSortMedianOfNine(arr, low, partitionIndex - 1);
            QuickSortMedianOfNine(arr, partitionIndex + 1, high);
        }
    }

    static int MedianOfNine(int[] arr, int low, int high)
    {
        int mid = low + (high - low) / 2;
        int quart1 = low + (mid - low) / 3;
        int quart2 = mid - (mid - low) / 3;
        int quart3 = mid + (high - mid) / 3;
        int quart4 = high - (high - mid) / 3;
        return MedianOfThree(arr, quart2, quart3);
    }

    // Utility method to swap two elements in an array
    static void Swap(ref int a, ref int b)
    {
        int temp = a;
        a = b;
        b = temp;
    }

    // Method to print technique names
    static void PrintTechniqueName(int techniqueIndex, StreamWriter writer)
    {
        switch (techniqueIndex)
        {
            case 0:
                writer.Write("Execution time for Median of Three");
                break;
            case 1:
                writer.Write("Execution time for Median of Five with random selection");
                break;
            case 2:
                writer.Write("Execution time for Median of Five without random selection");
                break;
            case 3:
                writer.Write("Execution time for Median of Seven with random selection");
                break;
            case 4:
                writer.Write("Execution time for Median of Seven without random selection");
                break;
            case 5:
                writer.Write("Execution time for Median of Nine with random selection");
                break;
            case 6:
                writer.Write("Execution time for Median of Nine without random selection");
                break;
        }
    }

    // Method to print an array
    static void PrintArray(int[] arr, StreamWriter writer)
    {
        foreach (var item in arr)
        {
            writer.Write(item + " ");
        }
        writer.WriteLine();
    }
}
